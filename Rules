#!/usr/bin/env ruby

require "bundler"
Bundler.setup

preprocess do
  system('rsync -a static/ output')  # Copy static files.
end


# ---- Compilation ----

# Don't modify Sass partials.
compile '/media/sass/_*/' do
end

# Render Sass files with Compass.
require 'compass'
compile '/media/sass/*/' do
  load_paths = ['content/media/sass', 'output/media/css']
  load_paths += Compass.sass_engine_options[:load_paths]
  filter :sass, :syntax => :scss, :load_paths => load_paths, :style => :compressed
end

# Don't modify any other files in content/media/.
compile '/media/*/' do
end

compile '/rss/' do
  filter :erb
end

compile '*' do
  case item[:extension]
  when 'md'
    filter :erb
    filter :kramdown
    filter :rubypants
    filter :fix_entities
    filter :colorize_syntax, :default_colorizer => :pygmentsrb, :syntax => :xhtml
    snapshot :body
    layout '/default/'
  when 'erb'
    filter :erb
    layout '/default/'
  when 'haml'
    filter :haml, :attr_wrapper => '"'
    layout '/default/'
  end
end


# ---- Routing ----

# Don't route Sass partials.
route '/media/sass/_*/' do
end

# content/media/sass/file.sass => /media/css/file.css
route '/media/sass/*/' do
  item.identifier.gsub(%r{^/media/sass/}, "/media/css/").chop + ".css"
end

# content/media/file.ext => /file.ext
route '/media/*/' do
  item.identifier.chop + '.' + item[:extension]
end

route '/articles/*/' do
  if item.binary?
    item.identifier.gsub(%r{^/articles/}, "/").chop + "." + item[:extension]
  else
    item.identifier.gsub(%r{^/articles/}, "/") + "index.html"
  end
end

route '/favicon/' do
  '/favicon.ico'
end

route '/not-found/' do
  "/not-found.html"
end

route '/rss/' do
  "/rss.rdf"
end

# content/file.md => /file/index.html
route '*' do
  item.identifier + "index.html"
end

# ---- Layout ----

layout '*', :haml, :attr_wrapper => '"'
